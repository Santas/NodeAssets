{"name":"Nodeassets","body":"## Get it using Nuget\r\n\r\nCurrently supports Asp.Net/Asp.Net MVC sites.\r\n\r\n```\r\nInstall-Package NodeAssets.AspNet\r\n```\r\n\r\n## Piles\r\n\r\nIn NodeAssets you group your assets into Piles where each pile is a logical grouping of your assets in a page. By default there is a global pile, but you can add any number of additional piles. Lets have a look at the pile configuration for a simple web site that has an admin area\r\n\r\n```\r\npiles\r\n    .AddFile(Server.MapPath(\"~/Scripts/jquery-1.6.4.js\"))\r\n    .AddFile(Server.MapPath(\"~/Scripts/jquery.signalR.js\"))\r\n    .AddDirectory(\"Home\", Server.MapPath(\"~/Scripts/Home\"), false)\r\n    .AddFile(\"Admin\", Server.MapPath(\"~/Scripts/Admin/admin.coffee\"))\r\n```\r\n\r\nNow you can replace your script tabs on your layout page with\r\n\r\n```\r\n// Razor - We will include the global JS libs and the Admin libs\r\n@Html.Raw(Assets.Js(true, \"Admin\"))\r\n```\r\n\r\n## Compilation/Minification\r\n\r\nNodeAssets uses each file's extension to decide how to compile it. For example by default a .coffee file will be compiled by the inbuilt nodejs coffee compiler. It is simple to change your compilers, for example if you don't want to use Node you can configure your own set of compilers.\r\n\r\n```\r\ncompilerConfig\r\n    .CompilerFor(\".coffee\", new CoffeeCompiler()) // Use your own coffee compiler\r\n    .CompilerFor(\".css\", new PassthroughCompiler())\r\n    .CompilerFor(\".js\", new PassthroughCompiler())\r\n    .CompilerFor(\".js.min\", new JSMinifyCompilter()) // Add the .min extension for minification\r\n```\r\n\r\nMinification is turned on/off depending on the source configuration\r\n\r\n```\r\nsourceConfig.Minimise(true)\r\n```\r\n\r\n### (Optional) Compilation using NodeJS\r\n\r\nRight now the only out of the box compilers that come with NodeAssets are built on top of NodeJS, and are included in the default compiler configuration.\r\n\r\n* [Coffeescript](http://coffeescript.org) (.coffee)\r\n* [Stylus](http://learnboost.github.com/stylus) (.styl)\r\n* [UglifyJS](https://github.com/mishoo/UglifyJS) (minifies .js files)\r\n* [Csso](https://github.com/css/csso) (minifies .css files)\r\n\r\nWhen you install the nuget package a Node folder is added to your project, make sure to install the latest NodeJS for windows from [here](http://nodejs.org/#download). After this in the command line browse to your Node folder and run\r\n\r\n```\r\nnpm install\r\n``` \r\n\r\nThis will grab all the required modules and enable them in your builds!\r\n\r\nRemember that these components are **optional** - Just implement your own ICompiler to leverage other libraries or keep your stuff in .NET land. Stay tuned for a blog post in the near future that will use the .NET 4.5 JSMinify/CSSMinify classes to do compilation.\r\n\r\n## Combination\r\n\r\nIf the combination setting is turned on each pile will be combined into one file to be served up to your web application. Note that the compilation and minification occurs before this step. Recommended for production environments to reduce the number of requests that a browser has to make. Compilation is turned on/off via the source configuration\r\n\r\n```\r\nsourceConfig.Combine(true)\r\n```\r\n\r\n## Compression\r\n\r\nIf compression is enabled NodeAssets will compress the response stream using gzip/deflate. The behavior is standards compliant, so it depends on the Accept-Encoding header sent by a browser. This is great for production environments as the bottleneck with websites is usually bandwidth. Compression is turned on/off via the assets configuration\r\n\r\n```\r\nassetsConfig.Compress(true)\r\n```\r\n\r\n## Caching\r\n\r\nIf caching is enabled NodeAssets uses an aggressive caching mechanism. Assets are versioned using a SHA-1 hash and set to be cached for the maximum time of a year. This is perfect for production environments as browsers will not even make a request for an asset that is has loaded before which means a MUCH faster site. However if your files have changed then the hash will change and browsers will be forced to grab the latest version of the asset. Your tags in your production environment will look a lot like\r\n\r\n```\r\n<link href=\"assets/global/global.css?v=1e0479d3ee71d58c33f82ebf68e1669653b8eb9e\" rel=\"stylesheet\" type=\"text/css\" />\r\n<script type=\"text/javascript\" src=\"assets/global/global.js?v=b1dda81e543867fba59c07e0fb48f31529e01f81\"></script>\r\n```\r\n\r\nCaching is turned on/off via the assets configuration\r\n\r\n```\r\nassetsConfig.Cache(true)\r\n```\r\n\r\n## Live CSS\r\n\r\nThis feature is extremely useful in development environments as it uses SignalR to force css updates on your page as you change them. No longer do you need to refresh your browser to see the css changes you make to your site. \r\n\r\n<iframe class=\"youtube-player\" type=\"text/html\" width=\"640\" height=\"385\" src=\"http://www.youtube.com/embed/JW5meKfy3fY\" frameborder=\"0\">\r\n</iframe>\r\n\r\nThere is a dependence on the SignalR client side libraries in this case so make sure to add them in by getting the SignalR nuget package\r\n\r\n```\r\nInstall-Package SignalR\r\n```\r\n\r\nAnd add the added javascript file to your assets.\r\n\r\nLive CSS is turned on/off via the assets configuration\r\n\r\n```\r\nassetsConfig.LiveCss(true, \"signalRNamespace\")\r\n```\r\n\r\n## Put it all together\r\n\r\n```\r\n#if DEBUG\r\n    bool isProd = false;\r\n#else\r\n    bool isProd = true;\r\n#endif\r\n\r\n    Assets\r\n        .Initialise(assetsConfig => assetsConfig\r\n            .ConfigureCompilers(compilerConfig => \r\n                compilerConfig.WithDefaultConfiguration(Server.MapPath(\"~/Node\")))\r\n            .ConfigureSourceManager(sourceConfig => \r\n                sourceConfig.UseDefaultConfiguration(Server.MapPath(\"~/built\"), isProd))\r\n            .Cache(isProd)\r\n            .Compress(isProd)\r\n            .LiveCss(!isProd))\r\n        .SetupCssPile(pile => pile\r\n            .AddFile(Server.MapPath(\"~/Content/Site.css\")))\r\n        .SetupJavascriptPile(pile =>\r\n        {\r\n            pile.AddFile(Server.MapPath(\"~/Scripts/jquery-1.6.4.js\"));\r\n\r\n            if (!isProd)\r\n            {\r\n                pile.AddFile(Server.MapPath(\"~/Scripts/jquery.signalR.js\"));\r\n            }\r\n\r\n            return pile;\r\n        })\r\n        .PrepareRoutes(RouteTable.Routes);\r\n```\r\n\r\n## More info?\r\n\r\n[Get Started Guide](http://blogs.planetsoftware.com.au/felix/archive/2012/04/19/node-assets-released.aspx)\r\n\r\n## Thanks\r\n\r\nThe work here was very much inspired by the [piler](https://github.com/epeli/piler) project for nodejs. I highly recommend this module if you are building nodejs websites in Express.","tagline":"Provides a complete assest manager solution including compilation from coffee/stylus, minification, combination, compression, caching, and also a refresh-on-change css live updater","google":"UA-30118497-1","note":"Don't delete this file! It's used internally to help with page regeneration."}